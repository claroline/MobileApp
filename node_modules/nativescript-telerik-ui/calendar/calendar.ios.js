var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var commonModule = require("./calendar-common");
require("utils/module-merge").merge(commonModule, exports);
var CalendarEvent = (function (_super) {
    __extends(CalendarEvent, _super);
    function CalendarEvent(title, startDate, endDate) {
        _super.call(this, title, startDate, endDate);
        this.title = title;
        this.endDate = endDate;
        this.startDate = startDate;
    }
    CalendarEvent.prototype.getNativeInstance = function () {
        if (!this.nativeInstance) {
            this.nativeInstance = TKCalendarEvent.new();
        }
        return this.nativeInstance;
    };
    CalendarEvent.prototype._setIsAllDay = function (value) {
        this.getNativeInstance().allDay = value;
    };
    CalendarEvent.prototype._getIsAllDay = function () {
        return this.getNativeInstance().allDay;
    };
    CalendarEvent.prototype._setEndDate = function (date) {
        this.getNativeInstance().endDate = date;
    };
    CalendarEvent.prototype._getEndDate = function () {
        return this.getNativeInstance().endDate;
    };
    CalendarEvent.prototype._setStartDate = function (date) {
        this.getNativeInstance().startDate = date;
    };
    CalendarEvent.prototype._getStartDate = function () {
        return this.getNativeInstance().startDate;
    };
    CalendarEvent.prototype._setTitle = function (value) {
        this.getNativeInstance().title = value;
    };
    CalendarEvent.prototype._getTitle = function () {
        return this.getNativeInstance().title;
    };
    return CalendarEvent;
})(commonModule.CalendarEvent);
exports.CalendarEvent = CalendarEvent;
var RadCalendar = (function (_super) {
    __extends(RadCalendar, _super);
    function RadCalendar() {
        _super.call(this);
        this._ios = TKCalendar.alloc().initWithFrame(UIScreen.mainScreen().bounds);
        this._nativeDelegate = new TKCalendarNativeDelegateImplementation().initWithOwner(this);
        this._ios.delegate = this._nativeDelegate;
        this.height = 300;
    }
    Object.defineProperty(RadCalendar.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    RadCalendar.prototype._onDisplayedDatePropertyChanged = function (eventData) {
        var newDate = eventData.newValue;
        if (newDate) {
            this.ios.displayedDate = newDate;
        }
    };
    RadCalendar.prototype._onSelectionModePropertyChanged = function (eventData) {
        var newModeString = eventData.newValue;
        if (newModeString) {
            this.setSelectionMode(newModeString);
        }
    };
    RadCalendar.prototype._onViewModePropertyChanged = function (eventData) {
        var newModeString = eventData.newValue;
        if (newModeString) {
            this.setViewMode(newModeString);
        }
    };
    RadCalendar.prototype._onSelectedDateRangePropertyChanged = function (eventData) {
        var newDateRange = eventData.newValue;
        if (newDateRange !== null && newDateRange !== undefined && newDateRange) {
            var tkDateRange = TKDateRange.initWithStartEnd(newDateRange.startDate, newDateRange.endDate);
            this.ios.selectedDatesRange = tkDateRange;
        }
    };
    RadCalendar.prototype._onSelectedDatesPropertyChanged = function (eventData) {
        var newDates = eventData.newValue;
        if (newDates) {
            var selectedDates = NSMutableArray.init();
            for (var date in newDates) {
                var newDate = newDates[date];
                selectedDates.addObject(newDate);
            }
            this.ios.selectedDates = selectedDates;
        }
    };
    RadCalendar.prototype._onSelectedDatePropertyChanged = function (eventData) {
        var newDate = eventData.newValue;
        if (newDate) {
            this.ios.selectedDate = newDate;
        }
    };
    RadCalendar.prototype._onMaxDatePropertyChanged = function (eventData) {
        var newDate = eventData.newValue;
        if (newDate) {
            this.ios.maxDate = newDate;
        }
    };
    RadCalendar.prototype._onMinDatePropertyChanged = function (eventData) {
        var newDate = eventData.newValue;
        if (newDate) {
            this.ios.minDate = newDate;
        }
    };
    RadCalendar.prototype._onEventSourcePropertyChanged = function (eventData) {
        var newSource = eventData.newValue;
        if (newSource) {
            var dataSource = CalendarNativeDataSourceImplementation.new().initWithSourceAndOwner(newSource, this);
            this.ios.dataSource = dataSource;
        }
    };
    RadCalendar.prototype.reload = function () {
        this.ios.reloadData();
    };
    RadCalendar.prototype.navigateForward = function () {
        this.ios.navigateForward(true);
    };
    RadCalendar.prototype.navigateBack = function () {
        this.ios.navigateBack(true);
    };
    RadCalendar.prototype.goToDate = function (date) {
        this.ios.navigateToDateAnimated(date, true);
    };
    RadCalendar.prototype.getEventsForDate = function (date) {
        var nativeResult = this.ios.eventsForDate(date);
        var result = new Array();
        var count = nativeResult.count;
        for (var i = 0; i < count; i++) {
            var nativeEvent = nativeResult.objectAtIndex(i);
            var event = new CalendarEvent(nativeEvent.title, nativeEvent.startDate, nativeEvent.endDate);
            result.push(event);
        }
        return result;
    };
    RadCalendar.prototype.setSelectionMode = function (mode) {
        this.ios.selectionMode = RadCalendar.getTKCalendarSelectionModeFromSelectionMode(mode);
    };
    RadCalendar.prototype.setViewMode = function (mode) {
        var viewMode = RadCalendar.getTKCalendarViewModeFromViewMode(mode);
        this.ios.viewMode = viewMode;
    };
    RadCalendar.getSelectionModeFromTKCalendarSelectionMode = function (selectionMode) {
        var result = "";
        switch (selectionMode) {
            case TKCalendarSelectionMode.TKCalendarSelectionModeMultiple:
                result = commonModule.CalendarSelectionMode.Multiple;
                break;
            case TKCalendarSelectionMode.TKCalendarSelectionModeNone:
                result = commonModule.CalendarSelectionMode.None;
                break;
            case TKCalendarSelectionMode.TKCalendarSelectionModeRange:
                result = commonModule.CalendarSelectionMode.Range;
                break;
            case TKCalendarSelectionMode.TKCalendarSelectionModeSingle:
                result = commonModule.CalendarSelectionMode.Single;
                break;
        }
        return result;
    };
    RadCalendar.getTKCalendarSelectionModeFromSelectionMode = function (selectionMode) {
        var modeString = selectionMode.toLowerCase();
        var result = null;
        switch (modeString) {
            case commonModule.CalendarSelectionMode.None.toLocaleLowerCase():
                result = TKCalendarSelectionMode.TKCalendarSelectionModeNone;
                break;
            case commonModule.CalendarSelectionMode.Single.toLocaleLowerCase():
                result = TKCalendarSelectionMode.TKCalendarSelectionModeSingle;
                break;
            case commonModule.CalendarSelectionMode.Multiple.toLocaleLowerCase():
                result = TKCalendarSelectionMode.TKCalendarSelectionModeMultiple;
                break;
            case commonModule.CalendarSelectionMode.Range.toLocaleLowerCase():
                result = TKCalendarSelectionMode.TKCalendarSelectionModeRange;
                break;
        }
        return result;
    };
    RadCalendar.getViewModeFromTKCalendarViewMode = function (viewMode) {
        var result = "";
        switch (viewMode) {
            // case TKCalendarViewMode.TKCalendarViewModeFlow: result = commonModule.CalendarViewMode.Flow; break;
            case TKCalendarViewMode.TKCalendarViewModeMonth:
                result = commonModule.CalendarViewMode.Month;
                break;
            case TKCalendarViewMode.TKCalendarViewModeMonthNames:
                result = commonModule.CalendarViewMode.MonthNames;
                break;
            case TKCalendarViewMode.TKCalendarViewModeWeek:
                result = commonModule.CalendarViewMode.Week;
                break;
            case TKCalendarViewMode.TKCalendarViewModeYear:
                result = commonModule.CalendarViewMode.Year;
                break;
        }
        return result;
    };
    RadCalendar.getTKCalendarViewModeFromViewMode = function (viewMode) {
        var modeString = viewMode.toLowerCase();
        var result = null;
        switch (modeString) {
            // case commonModule.CalendarViewMode.Flow.toLocaleLowerCase():
            //     result = TKCalendarViewMode.TKCalendarViewModeFlow;
            //     break;
            case commonModule.CalendarViewMode.Month.toLocaleLowerCase():
                result = TKCalendarViewMode.TKCalendarViewModeMonth;
                break;
            case commonModule.CalendarViewMode.MonthNames.toLocaleLowerCase():
                result = TKCalendarViewMode.TKCalendarViewModeMonthNames;
                break;
            case commonModule.CalendarViewMode.Week.toLocaleLowerCase():
                result = TKCalendarViewMode.TKCalendarViewModeWeek;
                break;
            case commonModule.CalendarViewMode.Year.toLocaleLowerCase():
                result = TKCalendarViewMode.TKCalendarViewModeYear;
                break;
        }
        return result;
    };
    return RadCalendar;
})(commonModule.RadCalendar);
exports.RadCalendar = RadCalendar;
var CalendarNativeDataSourceImplementation = (function (_super) {
    __extends(CalendarNativeDataSourceImplementation, _super);
    function CalendarNativeDataSourceImplementation() {
        _super.apply(this, arguments);
    }
    CalendarNativeDataSourceImplementation.new = function () {
        return _super.new.call(this);
    };
    CalendarNativeDataSourceImplementation.prototype.initWithSourceAndOwner = function (source, owner) {
        this.itemsSource = source;
        this._owner = owner;
        return this;
    };
    CalendarNativeDataSourceImplementation.prototype.calendarEventsForDate = function (calendar, date) {
        var nativeEvents = NSMutableArray.alloc().init();
        var dateJS = date;
        for (var event in this.itemsSource) {
            var eventObject = this.itemsSource[event];
            if (eventObject.startDate && eventObject.endDate) {
                if (eventObject.startDate.getTime() <= dateJS.getTime() && eventObject.endDate.getTime() >= dateJS.getTime()) {
                    var nativeEvent = eventObject.getNativeInstance();
                    nativeEvents.addObject(nativeEvent);
                }
            }
        }
        return nativeEvents;
    };
    CalendarNativeDataSourceImplementation.prototype.calendarEventsFromDateToDateWithCallback = function (calendar, fromDate, toDate, callback) {
        var nativeEvents = NSMutableArray.alloc().init();
        var fromDateJS = fromDate;
        var toDateJS = toDate;
        for (var event in this.itemsSource) {
            var eventObject = this.itemsSource[event];
            var startDate = eventObject.startDate;
            var endDate = eventObject.endDate;
            // SD - startDate
            // ED - endDate
            // FD - fromDate
            // TD - toDate
            // -----SD----FD--------ED-----------------------------------------TD---------
            if ((startDate.getTime() <= fromDateJS.getTime() && endDate.getTime() >= fromDateJS.getTime()) ||
                // -----SD----FD---------------------------------------------------TD--ED-----
                (startDate.getTime() <= fromDateJS.getTime() && endDate.getTime() >= toDateJS.getTime()) ||
                // -----------FD--------------------------------------------SD-----TD--ED-----
                (startDate.getTime() <= toDateJS.getTime() && endDate.getTime() >= toDateJS.getTime()) ||
                // -----------FD---SD---------------------------------------ED-----TD---------
                (startDate.getTime() >= fromDateJS.getTime() && endDate.getTime() <= toDateJS.getTime())) {
                nativeEvents.addObject(eventObject.getNativeInstance());
            }
        }
        return nativeEvents;
    };
    CalendarNativeDataSourceImplementation.ObjCProtocols = [TKCalendarDataSource];
    return CalendarNativeDataSourceImplementation;
})(NSObject);
exports.CalendarNativeDataSourceImplementation = CalendarNativeDataSourceImplementation;
var TKCalendarNativeDelegateImplementation = (function (_super) {
    __extends(TKCalendarNativeDelegateImplementation, _super);
    function TKCalendarNativeDelegateImplementation() {
        _super.apply(this, arguments);
    }
    TKCalendarNativeDelegateImplementation.new = function () {
        return _super.new.call(this);
    };
    TKCalendarNativeDelegateImplementation.prototype.initWithOwner = function (owner) {
        this._owner = owner;
        return this;
    };
    TKCalendarNativeDelegateImplementation.prototype.calendarDidChangedViewModeFromTo = function (calendar, previousViewMode, viewMode) {
        var args = {
            eventName: commonModule.RadCalendar.viewModeChangedEvent,
            object: this._owner,
            oldValue: RadCalendar.getViewModeFromTKCalendarViewMode(previousViewMode),
            newValue: RadCalendar.getViewModeFromTKCalendarViewMode(previousViewMode)
        };
        this._owner.notify(args);
    };
    TKCalendarNativeDelegateImplementation.prototype.calendarDidDeselectedDate = function (calendar, date) {
        var args = {
            eventName: commonModule.RadCalendar.dateDeselectedEvent,
            object: this._owner,
            date: date
        };
        this._owner.notify(args);
    };
    // Android currently doesn't supoort this event. will implement on a later stage.
    TKCalendarNativeDelegateImplementation.prototype.calendarShouldSelectDate = function (calendar, date) {
        var shouldSelect = true;
        // if(this._owner.hasListeners(commonModule.RadCalendar.dateSelectingEvent)) {
        // 	var args : commonModule.CalendarSelectingEventData = {
        // 		eventName: commonModule.RadCalendar.dateSelectingEvent,
        // 		object: this._owner,
        // 		date: RadCalendar.getDateFromNSDate(date),
        // 		returnValue : true
        // 	};
        // 	shouldSelect = args.returnValue;
        // }
        return shouldSelect;
    };
    TKCalendarNativeDelegateImplementation.prototype.calendarDidSelectDate = function (calendar, date) {
        var args = {
            eventName: commonModule.RadCalendar.dateSelectedEvent,
            object: this._owner,
            date: date,
        };
        this._owner.notify(args);
    };
    TKCalendarNativeDelegateImplementation.prototype.calendarDidNavigateToDate = function (calendar, date) {
        var args = {
            eventName: commonModule.RadCalendar.navigatedToDateEvent,
            object: this._owner,
            date: date
        };
        this._owner.notify(args);
    };
    TKCalendarNativeDelegateImplementation.prototype.calendarWillNavigateToDate = function (calendar, date) {
        var args = {
            eventName: commonModule.RadCalendar.navigatingToDateStartedEvent,
            object: this._owner,
            date: date
        };
        this._owner.notify(args);
    };
    TKCalendarNativeDelegateImplementation.ObjCProtocols = [TKCalendarDelegate];
    return TKCalendarNativeDelegateImplementation;
})(NSObject);
exports.TKCalendarNativeDelegateImplementation = TKCalendarNativeDelegateImplementation;
