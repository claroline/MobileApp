var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var commonModule = require("./chart-common");
var colorModule = require("color");
var initializersImpl = require("./chart-initializers");
require("utils/module-merge").merge(commonModule, exports);
var ChartDelegateImpl = (function (_super) {
    __extends(ChartDelegateImpl, _super);
    function ChartDelegateImpl() {
        _super.apply(this, arguments);
    }
    ChartDelegateImpl.new = function () {
        return _super.new.call(this);
    };
    ChartDelegateImpl.prototype.initWithOwner = function (owner) {
        this._owner = owner;
        return this;
    };
    ChartDelegateImpl.prototype.chartDidSelectSeries = function (chart, series) {
        var selectedSeries = null;
        for (var i = 0; i < this._owner.series.length; i++) {
            if (this._owner.series[i].ios.index == series.index) {
                selectedSeries = this._owner.series[i];
                break;
            }
        }
        var args = { eventName: commonModule.RadChartBase.seriesSelectedEvent,
            object: this._owner,
            series: selectedSeries,
            pointIndex: null,
            pointData: null };
        this._owner.notify(args);
    };
    ChartDelegateImpl.prototype.chartDidDeselectSeries = function (chart, series) {
        var deselectedSeries = null;
        for (var i = 0; i < this._owner.series.length; i++) {
            if (this._owner.series[i].ios.index == series.index) {
                deselectedSeries = this._owner.series[i];
                break;
            }
        }
        var args = { eventName: commonModule.RadChartBase.seriesDeselectedEvent,
            object: this._owner,
            series: deselectedSeries,
            pointIndex: null,
            pointData: null };
        this._owner.notify(args);
    };
    ChartDelegateImpl.prototype.chartDidSelectPointInSeriesAtIndex = function (chart, point, series, index) {
        var args = { eventName: commonModule.RadChartBase.pointSelectedEvent,
            object: this._owner,
            series: series,
            pointIndex: index.intValue,
            pointData: point };
        this._owner.notify(args);
    };
    ChartDelegateImpl.prototype.chartDidDeselectPointInSeriesAtIndex = function (chart, point, series, index) {
        var args = { eventName: commonModule.RadChartBase.pointDeselectedEvent,
            object: this._owner,
            series: series,
            pointIndex: index.intValue,
            pointData: point };
        this._owner.notify(args);
    };
    ChartDelegateImpl.prototype.chartDidZoom = function (chart) {
        var args = { eventName: commonModule.RadChartBase.chartZoomedEvent,
            object: this._owner,
            pointData: null,
            pointIndex: null,
            series: null };
        this._owner.notify(args);
    };
    ChartDelegateImpl.prototype.chartDidPan = function (chart) {
        var args = { eventName: commonModule.RadChartBase.chartPannedEvent,
            object: this._owner,
            pointData: null,
            pointIndex: null,
            series: null };
        this._owner.notify(args);
    };
    ChartDelegateImpl.ObjCProtocols = [TKChartDelegate];
    return ChartDelegateImpl;
})(NSObject);
////////////////////////////////////////////////////////////////////
var RadPieChart = (function (_super) {
    __extends(RadPieChart, _super);
    function RadPieChart() {
        _super.call(this);
        this._ios = TKChart.new();
        this._chartPalettes = [];
        this._delegate = ChartDelegateImpl.new().initWithOwner(this);
        this._ios.selectionMode = TKChartSelectionMode.TKChartSelectionModeSingle;
        this._ios.allowAnimations = true;
    }
    Object.defineProperty(RadPieChart.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    RadPieChart.prototype.addSeries = function (newSeries) {
        this.ios.removeAllData();
        this.ios.addSeries(newSeries);
        if (this._chartPalettes.length > 0) {
            this.series[0].ios.style.palette = this._chartPalettes[0]; //pie chart has only one series
            this.series[0].ios.style.paletteMode = TKChartSeriesStylePaletteMode.TKChartSeriesStylePaletteModeUseItemIndex;
            this._ios.legend.update();
        }
    };
    RadPieChart.prototype.onLoaded = function () {
        _super.prototype.onLoaded.call(this);
        this._ios.delegate = this._delegate;
    };
    RadPieChart.prototype.onUnloaded = function () {
        this._ios.delegate = null;
    };
    RadPieChart.prototype.onSeriesChanged = function (data) {
        _super.prototype.onSeriesChanged.call(this, data);
        if (data.oldValue) {
            for (var i = 0; i < data.oldValue.length; ++i) {
                data.oldValue[i].owner = undefined;
            }
        }
        if (this.series) {
            for (var i = 0; i < this.series.length; ++i) {
                this.series[i].owner = this;
            }
        }
    };
    RadPieChart.prototype.onSelectionModeChanged = function (data) {
        _super.prototype.onSelectionModeChanged.call(this, data);
        if (!this.ios) {
            return;
        }
        if (data.newValue) {
            if (commonModule.ChartSelectionMode.Single === data.newValue) {
                this.ios.selectionMode = TKChartSelectionMode.TKChartSelectionModeSingle;
            }
            else if (commonModule.ChartSelectionMode.Multiple === data.newValue) {
                this.ios.selectionMode = TKChartSelectionMode.TKChartSelectionModeMultiple;
            }
        }
    };
    RadPieChart.prototype.onPalettesChanged = function (data) {
        var newPalettes = data.newValue;
        this.loadPalette(newPalettes);
    };
    RadPieChart.prototype.loadPalette = function (newPalettes) {
        if (!this.ios) {
            return;
        }
        if (newPalettes) {
            for (var i = 0; i < this.series.length; ++i) {
                var entriesForSeries = this.getPaletteForSeries(newPalettes, this.series[i]);
                if (entriesForSeries) {
                    this.applyPaletteToSeries(entriesForSeries, this.series[i]);
                }
            }
        }
    };
    RadPieChart.prototype.getPaletteForSeries = function (source, series) {
        for (var i = 0; i < source.length; ++i) {
            var palette = source[i];
            if (palette.seriesName === series[commonModule.seriesName]) {
                return palette;
            }
        }
    };
    RadPieChart.prototype.applyPaletteToSeries = function (palette, series) {
        var seriesPalette = TKChartPalette.new();
        for (var i = 0; i < palette.entries.length; ++i) {
            var paletteEntry = palette.entries[i];
            var stroke = TKStroke.new();
            if (paletteEntry.strokeWidth) {
                stroke.width = paletteEntry.strokeWidth;
            }
            if (paletteEntry.strokeColor) {
                stroke.fill = TKSolidFill.solidFillWithColor((new colorModule.Color(paletteEntry.strokeColor)).ios);
            }
            var solidFill = TKSolidFill.new();
            if (paletteEntry.fillColor) {
                solidFill.color = (new colorModule.Color(paletteEntry.fillColor)).ios;
            }
            seriesPalette.addPaletteItem(TKChartPaletteItem.paletteItemWithStrokeAndFill(stroke, solidFill));
        }
        this._chartPalettes.push(seriesPalette);
    };
    return RadPieChart;
})(commonModule.RadPieChart);
exports.RadPieChart = RadPieChart;
var PieSeries = (function (_super) {
    __extends(PieSeries, _super);
    function PieSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(PieSeries.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        set: function (value) {
            this._ios = value;
        },
        enumerable: true,
        configurable: true
    });
    return PieSeries;
})(commonModule.PieSeries);
exports.PieSeries = PieSeries;
var DonutSeries = (function (_super) {
    __extends(DonutSeries, _super);
    function DonutSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(DonutSeries.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        set: function (value) {
            this._ios = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DonutSeries.prototype, "initializer", {
        get: function () {
            if (!this._initializer) {
                this._initializer = new initializersImpl.DonutSeriesValueMapper();
            }
            return this._initializer;
        },
        enumerable: true,
        configurable: true
    });
    DonutSeries.prototype.onInnerRadiusFactorChanged = function (data) {
        this.initializer.onInnerRadiusFactorChanged(data, this);
    };
    return DonutSeries;
})(commonModule.DonutSeries);
exports.DonutSeries = DonutSeries;
/////////////////////******//////////////////////////////
var RadCartesianChart = (function (_super) {
    __extends(RadCartesianChart, _super);
    function RadCartesianChart() {
        _super.call(this);
        this._ios = TKChart.new();
        this._ios.selectionMode = TKChartSelectionMode.TKChartSelectionModeSingle;
        this._ios.allowAnimations = true;
        this._delegate = ChartDelegateImpl.new().initWithOwner(this);
    }
    Object.defineProperty(RadCartesianChart.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    RadCartesianChart.prototype.onLoaded = function () {
        _super.prototype.onLoaded.call(this);
        this._ios.delegate = this._delegate;
    };
    RadCartesianChart.prototype.onUnloaded = function () {
        this._ios.delegate = null;
    };
    RadCartesianChart.prototype.onSeriesChanged = function (data) {
        _super.prototype.onSeriesChanged.call(this, data);
        if (data.oldValue) {
            for (var i = 0; i < data.oldValue.length; ++i) {
                data.oldValue[i].owner = undefined;
            }
        }
        if (this.series) {
            for (var i = 0; i < this.series.length; ++i) {
                this.series[i].owner = this;
            }
        }
        this.loadChart();
    };
    RadCartesianChart.prototype.addSeries = function (newSeries) {
        this.loadChart();
    };
    RadCartesianChart.prototype.getAxixByID = function (axisID) {
        if (this.horizontalAxis && this.horizontalAxis.id === axisID) {
            return this.horizontalAxis;
        }
        if (this.verticalAxis && this.verticalAxis.id === axisID) {
            return this.verticalAxis;
        }
        if (this.series) {
            var axes;
            for (var i = 0; i < this.series.length; ++i) {
                axes = this.series[i].horizontalAxis;
                if (axes && axes.id === axisID) {
                    return axes;
                }
                axes = this.series[i].verticalAxis;
                if (axes && axes.id === axisID) {
                    return axes;
                }
            }
        }
        return null;
    };
    RadCartesianChart.prototype.onAnnotationsChanged = function (data) {
        _super.prototype.onAnnotationsChanged.call(this, data);
        if (data.oldValue) {
            for (var i = 0; i < data.oldValue.length; ++i) {
                data.oldValue[i].owner = undefined;
            }
        }
        if (this.annotations) {
            for (var i = 0; i < this.annotations.length; ++i) {
                this.annotations[i].owner = this;
            }
        }
        this.loadChart();
    };
    RadCartesianChart.prototype.loadChart = function () {
        if (this.ios && this.series) {
            this.ios.removeAllData();
            if (this.horizontalAxis) {
                if (!this.horizontalAxis.verticalLocation) {
                    this.horizontalAxis.ios.position = TKChartAxisPosition.TKChartAxisPositionBottom;
                }
                this.ios.addAxis(this.horizontalAxis.ios);
            }
            if (this.verticalAxis) {
                if (!this.verticalAxis.horizontalLocation) {
                    this.verticalAxis.ios.position = TKChartAxisPosition.TKChartAxisPositionLeft;
                }
                this.ios.addAxis(this.verticalAxis.ios);
            }
            for (var i = 0; i < this.series.length; ++i) {
                if (this.series[i].ios) {
                    this.ios.addSeries(this.series[i].ios);
                }
            }
            if (this.horizontalZoom || this.verticalZoom) {
                this.updateZoom();
            }
            if (this.palettes) {
                this.loadPalette(this.palettes);
            }
            if (this.grid) {
                this.updateGridStyle(this.grid);
            }
            if (this.annotations) {
                for (var i = 0; i < this.annotations.length; ++i) {
                    if (this.annotations[i].ios && this.annotations[i].axisId) {
                        this.ios.addAnnotation(this.annotations[i].ios);
                    }
                }
            }
            this.ios.update();
        }
    };
    RadCartesianChart.prototype.updateZoom = function () {
        if (!this.horizontalZoom && !this.verticalZoom) {
            return;
        }
        if (this.horizontalZoom && this.horizontalAxis) {
            this.horizontalAxis.ios.zoom = this.horizontalZoom;
        }
        if (this.verticalZoom && this.verticalAxis) {
            this.verticalAxis.ios.zoom = this.verticalZoom;
        }
        if (this.series) {
            for (var i = 0; i < this.series.length; ++i) {
                if (this.series[i].ios) {
                    if (this.series[i].horizontalAxis && this.horizontalZoom) {
                        this.series[i].horizontalAxis.ios.zoom = this.horizontalZoom;
                    }
                    if (this.series[i].verticalAxis && this.verticalZoom) {
                        this.series[i].verticalAxis.ios.zoom = this.verticalZoom;
                    }
                }
            }
        }
    };
    RadCartesianChart.prototype.updateGridStyle = function (newStyle) {
        if (this.ios && newStyle) {
            if (this.ios) {
                this.ios.gridStyle.verticalLineStroke = newStyle.ios.verticalLineStroke;
                ;
                this.ios.gridStyle.verticalLineAlternateStroke = newStyle.ios.verticalLineAlternateStroke;
                this.ios.gridStyle.verticalLinesHidden = newStyle.ios.verticalLinesHidden;
                this.ios.gridStyle.verticalFill = newStyle.ios.verticalFill;
                this.ios.gridStyle.verticalAlternateFill = newStyle.ios.verticalAlternateFill;
                this.ios.gridStyle.horizontalLineStroke = newStyle.ios.horizontalLineStroke;
                this.ios.gridStyle.horizontalLineAlternateStroke = newStyle.ios.horizontalLineAlternateStroke;
                this.ios.gridStyle.horizontalFill = newStyle.ios.horizontalFill;
                this.ios.gridStyle.horizontalAlternateFill = newStyle.ios.horizontalAlternateFill;
                this.ios.gridStyle.horizontalLinesHidden = newStyle.ios.horizontalLinesHidden;
            }
        }
    };
    RadCartesianChart.prototype.onGridChanged = function (data) {
        if (this.ios) {
            this.updateGridStyle(data.newValue);
        }
    };
    RadCartesianChart.prototype.onPalettesChanged = function (data) {
        var newPalettes = data.newValue;
        this.loadPalette(newPalettes);
    };
    RadCartesianChart.prototype.loadPalette = function (palettes) {
        if (!this.ios) {
            return;
        }
        if (this.palettes) {
            for (var i = 0; i < this.series.length; ++i) {
                var entriesForSeries = this.getPaletteForSeries(palettes, this.series[i]);
                if (!entriesForSeries) {
                    break;
                }
                this.applyPaletteToSeries(entriesForSeries, this.series[i]);
            }
        }
    };
    RadCartesianChart.prototype.getPaletteForSeries = function (source, series) {
        for (var i = 0; i < source.length; ++i) {
            var palette = source[i];
            if (palette.seriesName === series[commonModule.seriesName]) {
                return palette;
            }
        }
    };
    RadCartesianChart.prototype.applyPaletteToSeries = function (palette, series) {
        var seriesPalette = TKChartPalette.new();
        for (var i = 0; i < palette.entries.length; ++i) {
            var paletteEntry = palette.entries[i];
            var stroke = TKStroke.new();
            if (paletteEntry.strokeWidth) {
                stroke.width = paletteEntry.strokeWidth;
            }
            if (paletteEntry.strokeColor) {
                stroke.fill = TKSolidFill.solidFillWithColor((new colorModule.Color(paletteEntry.strokeColor)).ios);
            }
            var solidFill = TKSolidFill.new();
            if (paletteEntry.fillColor) {
                solidFill.color = (new colorModule.Color(paletteEntry.fillColor)).ios;
            }
            seriesPalette.addPaletteItem(TKChartPaletteItem.paletteItemWithStrokeAndFill(stroke, solidFill));
        }
        if (series.ios) {
            series.ios.style.palette = seriesPalette;
        }
    };
    RadCartesianChart.prototype.onSelectionModeChanged = function (data) {
        _super.prototype.onSelectionModeChanged.call(this, data);
        if (!this.ios) {
            return;
        }
        if (data.newValue) {
            if (commonModule.ChartSelectionMode.Single === data.newValue) {
                this.ios.selectionMode = TKChartSelectionMode.TKChartSelectionModeSingle;
            }
            else if (commonModule.ChartSelectionMode.Multiple === data.newValue) {
                this.ios.selectionMode = TKChartSelectionMode.TKChartSelectionModeMultiple;
            }
        }
    };
    RadCartesianChart.prototype.onHorizontalZoomChanged = function (data) {
        if (!this.ios) {
            return;
        }
        if (!isNaN(+data.newValue) && data.newValue > 1) {
            this.updateZoom();
        }
        else {
            console.log("WARNING: Horizontal zoom must be a number greater or equal to 1");
        }
    };
    RadCartesianChart.prototype.onVerticalZoomChanged = function (data) {
        if (!this.ios) {
            return;
        }
        if (!isNaN(+data.newValue) && data.newValue > 1) {
            this.updateZoom();
        }
        else {
            console.log("WARNING: Vertical zoom must be a number greater or equal to 1");
        }
    };
    return RadCartesianChart;
})(commonModule.RadCartesianChart);
exports.RadCartesianChart = RadCartesianChart;
////////////////////////////////////////////////////////////////////////
// LinearAxis
////////////////////////////////////////////////////////////////////////
var LinearAxis = (function (_super) {
    __extends(LinearAxis, _super);
    function LinearAxis() {
        _super.call(this);
        this._ios = TKChartNumericAxis.new();
    }
    Object.defineProperty(LinearAxis.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    LinearAxis.prototype.onMajorStepChanged = function (data) {
        if (!isNaN(+data.newValue)) {
            this.ios.majorTickInterval = data.newValue;
        }
    };
    LinearAxis.prototype.onMinimumChanged = function (data) {
        console.log("LinearAxis range minimum: ", data.newValue);
        if (!isNaN(+data.newValue)) {
            if (this.ios.range) {
                this.ios.range.minimum = data.newValue;
            }
            else {
                this.ios.range = TKRange.rangeWithMinimumAndMaximum(data.newValue, data.newValue * 2);
            }
        }
    };
    LinearAxis.prototype.onMaximumChanged = function (data) {
        console.log("LinearAxis range maximum: ", data.newValue);
        if (!isNaN(+data.newValue)) {
            if (this.ios.range) {
                this.ios.range.maximum = data.newValue;
            }
            else {
                this.ios.range = TKRange.rangeWithMinimumAndMaximum(data.newValue / 2, data.newValue);
            }
        }
    };
    return LinearAxis;
})(commonModule.LinearAxis);
exports.LinearAxis = LinearAxis;
////////////////////////////////////////////////////////////////////////
// CategoricalAxis
////////////////////////////////////////////////////////////////////////
var CategoricalAxis = (function (_super) {
    __extends(CategoricalAxis, _super);
    function CategoricalAxis() {
        _super.call(this);
        this._ios = TKChartCategoryAxis.alloc().init();
    }
    Object.defineProperty(CategoricalAxis.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    return CategoricalAxis;
})(commonModule.CategoricalAxis);
exports.CategoricalAxis = CategoricalAxis;
////////////////////////////////////////////////////////////////////////
// DateTimeContinuousAxis
////////////////////////////////////////////////////////////////////////
var DateTimeContinuousAxis = (function (_super) {
    __extends(DateTimeContinuousAxis, _super);
    function DateTimeContinuousAxis() {
        _super.call(this);
        this._ios = TKChartDateTimeAxis.new();
        this._ios.majorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitMonths;
        this._ios.minorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitMonths;
        this._ios.majorTickInterval = 1;
        this._ios.plotMode = TKChartAxisPlotMode.TKChartAxisPlotModeBetweenTicks;
    }
    Object.defineProperty(DateTimeContinuousAxis.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    DateTimeContinuousAxis.prototype.onMinimumChanged = function (data) {
        if (data.newValue && this.maximum) {
            this.updateRange();
        }
    };
    DateTimeContinuousAxis.prototype.onMaximumChanged = function (data) {
        if (data.newValue && this.minimum) {
            this.updateRange();
        }
    };
    DateTimeContinuousAxis.prototype.updateRange = function () {
        var dateFormatter = NSDateFormatter.alloc().init();
        dateFormatter.dateFormat = "dd/MM/yyyy"; //todo: this date format have to be added as property
        var minDate = dateFormatter.dateFromString(this.minimum);
        var maxDate = dateFormatter.dateFromString(this.maximum);
        this.ios.range = TKRange.rangeWithMinimumAndMaximum(minDate, maxDate);
    };
    DateTimeContinuousAxis.prototype.onPlotModeChanged = function (data) {
        if (data.newValue) {
            switch (commonModule.AxisPlotMode[data.newValue]) {
                case commonModule.AxisPlotMode.BetweenTicks:
                    this.ios.plotMode = TKChartAxisPlotMode.TKChartAxisPlotModeBetweenTicks;
                    break;
                case commonModule.AxisPlotMode.OnTicks:
                    this.ios.plotMode = TKChartAxisPlotMode.TKChartAxisPlotModeOnTicks;
                    break;
            }
        }
    };
    DateTimeContinuousAxis.prototype.onMajorStepChanged = function (data) {
        if (data.newValue) {
            //todo: consider minorTickIntervalUnit property value. It is used for financial series and determins the width of candlesticks.
            switch (commonModule.DateTimeComponent[data.newValue]) {
                case commonModule.DateTimeComponent.Second:
                    this.ios.majorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitSeconds;
                    this.ios.minorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitSeconds;
                    break;
                case commonModule.DateTimeComponent.Minute:
                    this.ios.majorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitMinutes;
                    this.ios.minorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitMinutes;
                    break;
                case commonModule.DateTimeComponent.Hour:
                    this.ios.majorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitHours;
                    this.ios.minorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitHours;
                    break;
                case commonModule.DateTimeComponent.Day:
                    this.ios.majorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitDays;
                    this.ios.minorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitDays;
                    break;
                case commonModule.DateTimeComponent.Week:
                    this.ios.majorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitWeeks;
                    this.ios.minorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitWeeks;
                    break;
                case commonModule.DateTimeComponent.Month:
                    this.ios.majorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitMonths;
                    this.ios.minorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitMonths;
                    break;
                case commonModule.DateTimeComponent.Year:
                    this.ios.majorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitYears;
                    this.ios.minorTickIntervalUnit = TKChartDateTimeAxisIntervalUnit.TKChartDateTimeAxisIntervalUnitYears;
                    break;
            }
        }
    };
    return DateTimeContinuousAxis;
})(commonModule.DateTimeContinuousAxis);
exports.DateTimeContinuousAxis = DateTimeContinuousAxis;
////////////////////////////////////////////////////////////////////////
// DateTimeCategoricalAxis
////////////////////////////////////////////////////////////////////////
var DateTimeCategoricalAxis = (function (_super) {
    __extends(DateTimeCategoricalAxis, _super);
    function DateTimeCategoricalAxis() {
        _super.call(this);
        this._ios = TKChartCategoryAxis.new();
    }
    Object.defineProperty(DateTimeCategoricalAxis.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    DateTimeCategoricalAxis.prototype.onDateFormatChanged = function (data) {
    };
    DateTimeCategoricalAxis.prototype.onMajorStepChanged = function (data) {
    };
    DateTimeCategoricalAxis.prototype.onDateTimeComponentChanged = function (data) {
    };
    return DateTimeCategoricalAxis;
})(commonModule.DateTimeCategoricalAxis);
exports.DateTimeCategoricalAxis = DateTimeCategoricalAxis;
////////////////////////////////////////////////////////////////////////
// RadCartesianChartGrid
////////////////////////////////////////////////////////////////////////
var RadCartesianChartGrid = (function (_super) {
    __extends(RadCartesianChartGrid, _super);
    function RadCartesianChartGrid() {
        _super.call(this);
        this._ios = TKChartGridStyle.new();
    }
    Object.defineProperty(RadCartesianChartGrid.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    RadCartesianChartGrid.prototype.onVerticalLinesVisibleChanged = function (data) {
        this.ios.verticalLinesHidden = (data.newValue == true) ? false : true;
    };
    RadCartesianChartGrid.prototype.onHorizontalLinesVisibleChanged = function (data) {
        this.ios.horizontalLinesHidden = (data.newValue == true) ? false : true;
    };
    RadCartesianChartGrid.prototype.onHorizontalStripLinesVisibleChanged = function (data) {
        if (data.newValue == false) {
            this.ios.horizontalFill = null;
            this.ios.horizontalAlternateFill = null;
        }
    };
    RadCartesianChartGrid.prototype.onVerticalStripLinesVisibleChanged = function (data) {
        if (data.newValue == false) {
            this.ios.verticalFill = null;
            this.ios.verticalAlternateFill = null;
        }
    };
    RadCartesianChartGrid.prototype.onVerticalStrokeColorChanged = function (data) {
        if (data.newValue) {
            this.ios.verticalLineStroke.fill = TKSolidFill.solidFillWithColor((new colorModule.Color(data.newValue)).ios);
            this.ios.verticalLineAlternateStroke.fill = TKSolidFill.solidFillWithColor((new colorModule.Color(data.newValue)).ios);
        }
    };
    RadCartesianChartGrid.prototype.onHorizontalStrokeColorChanged = function (data) {
        if (data.newValue) {
            this.ios.horizontalLineStroke.fill = TKSolidFill.solidFillWithColor((new colorModule.Color(data.newValue)).ios);
            this.ios.horizontalLineAlternateStroke.fill = TKSolidFill.solidFillWithColor((new colorModule.Color(data.newValue)).ios);
        }
    };
    RadCartesianChartGrid.prototype.onHorizontalStrokeWidthChanged = function (data) {
        if (data.newValue) {
            this.ios.horizontalLineStroke.width = data.newValue;
        }
    };
    RadCartesianChartGrid.prototype.onVerticalStrokeWidthChanged = function (data) {
        if (data.newValue) {
            this.ios.verticalLineStroke.width = data.newValue;
        }
    };
    RadCartesianChartGrid.prototype.onVerticalStripLineColorChanged = function (data) {
        if (data.newValue) {
            var colors = data.newValue.split(',');
            this.ios.verticalFill = TKSolidFill.solidFillWithColor((new colorModule.Color(colors[0])).ios);
            this.ios.verticalAlternateFill = (colors[1] == undefined) ? null : TKSolidFill.solidFillWithColor((new colorModule.Color(colors[1])).ios);
        }
    };
    RadCartesianChartGrid.prototype.onHorizontalStripLineColorChanged = function (data) {
        if (data.newValue) {
            var colors = data.newValue.split(',');
            this.ios.horizontalFill = TKSolidFill.solidFillWithColor((new colorModule.Color(colors[0])).ios);
            this.ios.horizontalAlternateFill = (colors[1] == undefined) ? null : TKSolidFill.solidFillWithColor((new colorModule.Color(colors[1])).ios);
        }
    };
    return RadCartesianChartGrid;
})(commonModule.RadCartesianChartGrid);
exports.RadCartesianChartGrid = RadCartesianChartGrid;
////////////////////////////////////////////////////////////////////////
// RadLegendView
////////////////////////////////////////////////////////////////////////
var RadLegendView = (function (_super) {
    __extends(RadLegendView, _super);
    function RadLegendView() {
        _super.apply(this, arguments);
    }
    RadLegendView.prototype.onPositionChanged = function (data) {
        this.updateLegendView(this._chart);
    };
    RadLegendView.prototype.onTitleChanged = function (data) {
        this.updateLegendView(this._chart);
    };
    RadLegendView.prototype.updateLegendPosition = function (chartView) {
        if (!this.position) {
            return;
        }
        switch (this.position) {
            case commonModule.ChartLegendPosition.Left:
                chartView.ios.legend.style.position = TKChartLegendPosition.TKChartLegendPositionLeft;
                break;
            case commonModule.ChartLegendPosition.Right:
                chartView.ios.legend.style.position = TKChartLegendPosition.TKChartLegendPositionRight;
                break;
            case commonModule.ChartLegendPosition.Top:
                chartView.ios.legend.style.position = TKChartLegendPosition.TKChartLegendPositionTop;
                break;
            case commonModule.ChartLegendPosition.Bottom:
                chartView.ios.legend.style.position = TKChartLegendPosition.TKChartLegendPositionBottom;
                break;
            case commonModule.ChartLegendPosition.Floating:
                chartView.ios.legend.style.position = TKChartLegendPosition.TKChartLegendPositionFloating;
                break;
        }
    };
    RadLegendView.prototype.updateLegendView = function (chartView) {
        if (!(chartView)) {
            return;
        }
        if (!(chartView instanceof commonModule.RadChartBase)) {
            console.log("WARNING: Wrong view is attached to chart legend!");
            return;
        }
        if (!this._chart) {
            this._chart = chartView;
        }
        chartView.ios.legend.hidden = false;
        if (this.position) {
            this.updateLegendPosition(chartView);
        }
        if (this.title) {
            chartView.ios.legend.titleLabel.text = this.title;
            chartView.ios.legend.showTitle = true;
        }
        //chartView.ios.legend.update();
    };
    return RadLegendView;
})(commonModule.RadLegendView);
exports.RadLegendView = RadLegendView;
////////////////////////////////////////////////////////////////////////
// BarSeries
////////////////////////////////////////////////////////////////////////
var BarSeries = (function (_super) {
    __extends(BarSeries, _super);
    function BarSeries() {
        _super.call(this);
    }
    Object.defineProperty(BarSeries.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        set: function (value) {
            this._ios = value;
        },
        enumerable: true,
        configurable: true
    });
    return BarSeries;
})(commonModule.BarSeries);
exports.BarSeries = BarSeries;
////////////////////////////////////////////////////////////////////////
// LineSeries
////////////////////////////////////////////////////////////////////////
var LineSeries = (function (_super) {
    __extends(LineSeries, _super);
    function LineSeries() {
        _super.call(this);
    }
    Object.defineProperty(LineSeries.prototype, "initializer", {
        get: function () {
            if (!this._initializer) {
                this._initializer = new initializersImpl.LineSeriesValueMapper();
            }
            return this._initializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSeries.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        set: function (value) {
            this._ios = value;
        },
        enumerable: true,
        configurable: true
    });
    return LineSeries;
})(commonModule.CategoricalSeries);
exports.LineSeries = LineSeries;
var SplineSeries = (function (_super) {
    __extends(SplineSeries, _super);
    function SplineSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(SplineSeries.prototype, "initializer", {
        get: function () {
            if (!this._initializer) {
                this._initializer = new initializersImpl.SplineSeriesValueMapper();
            }
            return this._initializer;
        },
        enumerable: true,
        configurable: true
    });
    return SplineSeries;
})(LineSeries);
exports.SplineSeries = SplineSeries;
var AreaSeries = (function (_super) {
    __extends(AreaSeries, _super);
    function AreaSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(AreaSeries.prototype, "initializer", {
        get: function () {
            if (!this._initializer) {
                this._initializer = new initializersImpl.AreaSeriesValueMapper();
            }
            return this._initializer;
        },
        enumerable: true,
        configurable: true
    });
    return AreaSeries;
})(LineSeries);
exports.AreaSeries = AreaSeries;
var SplineAreaSeries = (function (_super) {
    __extends(SplineAreaSeries, _super);
    function SplineAreaSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(SplineAreaSeries.prototype, "initializer", {
        get: function () {
            if (!this._initializer) {
                this._initializer = new initializersImpl.SplineAreaSeriesValueMapper();
            }
            return this._initializer;
        },
        enumerable: true,
        configurable: true
    });
    return SplineAreaSeries;
})(LineSeries);
exports.SplineAreaSeries = SplineAreaSeries;
var BubbleSeries = (function (_super) {
    __extends(BubbleSeries, _super);
    function BubbleSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(BubbleSeries.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        set: function (value) {
            this._ios = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "initializer", {
        get: function () {
            if (!this._initializer) {
                this._initializer = new initializersImpl.BubbleSeriesValueMapper();
            }
            return this._initializer;
        },
        enumerable: true,
        configurable: true
    });
    BubbleSeries.prototype.onBubbleScaleChanged = function (data) {
        this.initializer.onBubbleScalePropertyChanged(data, this);
    };
    BubbleSeries.prototype.onBubbleSizePropertyChanged = function (data) {
        this.initializer.onBubbleSizePropertyChanged(data, this);
    };
    return BubbleSeries;
})(commonModule.BubbleSeries);
exports.BubbleSeries = BubbleSeries;
var ScatterSeries = (function (_super) {
    __extends(ScatterSeries, _super);
    function ScatterSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(ScatterSeries.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        set: function (value) {
            this._ios = value;
        },
        enumerable: true,
        configurable: true
    });
    return ScatterSeries;
})(commonModule.ScatterSeries);
exports.ScatterSeries = ScatterSeries;
var ScatterBubbleSeries = (function (_super) {
    __extends(ScatterBubbleSeries, _super);
    function ScatterBubbleSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(ScatterBubbleSeries.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        set: function (value) {
            this._ios = value;
        },
        enumerable: true,
        configurable: true
    });
    return ScatterBubbleSeries;
})(commonModule.ScatterBubbleSeries);
exports.ScatterBubbleSeries = ScatterBubbleSeries;
var OhlcSeries = (function (_super) {
    __extends(OhlcSeries, _super);
    function OhlcSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(OhlcSeries.prototype, "ios", {
        get: function () {
            return this._series;
        },
        set: function (value) {
            this._series = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OhlcSeries.prototype, "initializer", {
        get: function () {
            if (!this._initializer) {
                this._initializer = new initializersImpl.OhlcSeriesValueMapper();
            }
            return this._initializer;
        },
        enumerable: true,
        configurable: true
    });
    OhlcSeries.prototype.onHighPropertyNameChanged = function (data) {
        this.initializer.onHighPropertyNameChanged(data, this);
    };
    OhlcSeries.prototype.onLowPropertyNameChanged = function (data) {
        this.initializer.onLowPropertyNameChanged(data, this);
    };
    OhlcSeries.prototype.onOpenPropertyNameChanged = function (data) {
        this.initializer.onOpenPropertyNameChanged(data, this);
    };
    OhlcSeries.prototype.onClosePropertyNameChanged = function (data) {
        this.initializer.onClosePropertyNameChanged(data, this);
    };
    OhlcSeries.prototype.onValuePropertyChanged = function (data) {
        console.log("WARNING: OHLC series doesnt use valueProperty property.");
    };
    return OhlcSeries;
})(commonModule.OhlcSeries);
exports.OhlcSeries = OhlcSeries;
var CandlestickSeries = (function (_super) {
    __extends(CandlestickSeries, _super);
    function CandlestickSeries() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(CandlestickSeries.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        set: function (value) {
            this._ios = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeries.prototype, "initializer", {
        get: function () {
            if (!this._initializer) {
                this._initializer = new initializersImpl.CandlestickSeriesValueMapper();
            }
            return this._initializer;
        },
        enumerable: true,
        configurable: true
    });
    return CandlestickSeries;
})(OhlcSeries);
exports.CandlestickSeries = CandlestickSeries;
//////////////////////////////////////////////////////////
var ChartGridLineAnnotation = (function (_super) {
    __extends(ChartGridLineAnnotation, _super);
    function ChartGridLineAnnotation() {
        _super.call(this);
        this._ios = TKChartGridLineAnnotation.new();
        this._ios.style.stroke = TKStroke.strokeWithColor(new colorModule.Color("Black").ios);
    }
    Object.defineProperty(ChartGridLineAnnotation.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    ChartGridLineAnnotation.prototype.onOwnerChanged = function () {
        if (!this.axisId) {
            console.log("WARNING: axisId property is mandatory for any anotation.");
            return;
        }
        var forAxis = this.owner.getAxixByID(this.axisId);
        if (forAxis) {
            this._ios.axis = forAxis.ios;
        }
    };
    ChartGridLineAnnotation.prototype.onValueChanged = function (data) {
        if (data.newValue) {
            this._ios.value = data.newValue;
        }
    };
    ChartGridLineAnnotation.prototype.onAxisIdChanged = function (data) {
    };
    ChartGridLineAnnotation.prototype.onZPositionChanged = function (data) {
        if (data.newValue) {
            switch (commonModule.ChartAnnotationZPosition[data.newValue]) {
                case commonModule.ChartAnnotationZPosition.BellowSeries:
                    this._ios.zPosition = TKChartAnnotationZPosition.TKChartAnnotationZPositionBelowSeries;
                    break;
                case commonModule.ChartAnnotationZPosition.AboveSeries:
                    this._ios.zPosition = TKChartAnnotationZPosition.TKChartAnnotationZPositionAboveSeries;
                    break;
            }
        }
    };
    ChartGridLineAnnotation.prototype.onHiddenChanged = function (data) {
        this._ios.hidden = data.newValue;
    };
    ChartGridLineAnnotation.prototype.onStrokeWidthChanged = function (data) {
        if (!isNaN(+data.newValue)) {
            this._ios.style.stroke.width = data.newValue;
        }
    };
    ChartGridLineAnnotation.prototype.onStrokeColorChanged = function (data) {
        if (data.newValue) {
            this._ios.style.stroke.color = (new colorModule.Color(data.newValue)).ios;
        }
    };
    ChartGridLineAnnotation.prototype.onStrokeDashPatternChanged = function (data) {
        if (data.newValue) {
            var array = JSON.parse("[" + data.newValue + "]");
            if (array instanceof Array) {
                var nativeSource = NSMutableArray.new();
                var item, name, value;
                for (var i = 0; i < array.length; i++) {
                    item = array[i];
                    nativeSource.addObject(item);
                }
                this._ios.style.stroke.dashPattern = nativeSource;
            }
        }
    };
    return ChartGridLineAnnotation;
})(commonModule.ChartGridLineAnnotation);
exports.ChartGridLineAnnotation = ChartGridLineAnnotation;
var ChartPlotBandAnnotation = (function (_super) {
    __extends(ChartPlotBandAnnotation, _super);
    function ChartPlotBandAnnotation() {
        _super.call(this);
        this._ios = TKChartBandAnnotation.new();
        this._ios.style.stroke = TKStroke.strokeWithColor(new colorModule.Color("Black").ios);
    }
    Object.defineProperty(ChartPlotBandAnnotation.prototype, "ios", {
        get: function () {
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    ChartPlotBandAnnotation.prototype.onOwnerChanged = function () {
        if (!this.axisId) {
            console.log("WARNING: axisId property is mandatory for any anotation.");
            return;
        }
        var forAxis = this.owner.getAxixByID(this.axisId);
        if (forAxis) {
            this._ios.axis = forAxis.ios;
        }
    };
    ChartPlotBandAnnotation.prototype.onMinValueChanged = function (data) {
        if (!isNaN(+data.newValue)) {
            if (this.ios.range) {
                this.ios.range.minimum = data.newValue;
            }
            else {
                this.ios.range = TKRange.rangeWithMinimumAndMaximum(data.newValue, data.newValue * 2);
            }
        }
    };
    ChartPlotBandAnnotation.prototype.onMaxValueChanged = function (data) {
        if (!isNaN(+data.newValue)) {
            if (this.ios.range) {
                this.ios.range.maximum = data.newValue;
            }
            else {
                this.ios.range = TKRange.rangeWithMinimumAndMaximum(data.newValue / 2, data.newValue);
            }
        }
    };
    ChartPlotBandAnnotation.prototype.onFillColorChanged = function (data) {
        if (data.newValue) {
            this._ios.style.fill = TKSolidFill.solidFillWithColor((new colorModule.Color(data.newValue)).ios);
        }
    };
    ChartPlotBandAnnotation.prototype.onAxisIdChanged = function (data) {
    };
    ChartPlotBandAnnotation.prototype.onZPositionChanged = function (data) {
        if (data.newValue) {
            switch (commonModule.ChartAnnotationZPosition[data.newValue]) {
                case commonModule.ChartAnnotationZPosition.BellowSeries:
                    this._ios.zPosition = TKChartAnnotationZPosition.TKChartAnnotationZPositionBelowSeries;
                    break;
                case commonModule.ChartAnnotationZPosition.AboveSeries:
                    this._ios.zPosition = TKChartAnnotationZPosition.TKChartAnnotationZPositionAboveSeries;
                    break;
            }
        }
    };
    ChartPlotBandAnnotation.prototype.onHiddenChanged = function (data) {
        this._ios.hidden = data.newValue;
    };
    ChartPlotBandAnnotation.prototype.onStrokeWidthChanged = function (data) {
        if (!isNaN(+data.newValue)) {
            this._ios.style.stroke.width = data.newValue;
        }
    };
    ChartPlotBandAnnotation.prototype.onStrokeColorChanged = function (data) {
        if (data.newValue) {
            this._ios.style.stroke.fill = TKSolidFill.solidFillWithColor((new colorModule.Color(data.newValue)).ios);
        }
    };
    ChartPlotBandAnnotation.prototype.onStrokeDashPatternChanged = function (data) {
        if (data.newValue) {
            var array = JSON.parse("[" + data.newValue + "]");
            if (array instanceof Array) {
                var nativeSource = NSMutableArray.new();
                var item, name, value;
                for (var i = 0; i < array.length; i++) {
                    item = array[i];
                    nativeSource.addObject(item);
                }
                this._ios.style.stroke.dashPattern = nativeSource;
            }
        }
    };
    return ChartPlotBandAnnotation;
})(commonModule.ChartPlotBandAnnotation);
exports.ChartPlotBandAnnotation = ChartPlotBandAnnotation;
